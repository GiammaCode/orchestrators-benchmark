openapi: 3.0.0
info:
  title: Submission management API
  description: API for uploading assignments (professors) and submitting homework (students).
  version: 1.0.0

servers:
  - url: http://localhost:8080

tags:
  - name: Student
    description: Endpoints for the student area
  - name: Professor
    description: Endpoints for the professor area

paths:
  # --- Student Area ---

  /assignments:
    get:
      tags:
        - Student
      summary: (Student) List all assignments
      description: Returns the list of all available assignments.
      responses:
        '200':
          description: A list of assignments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
    post:
      tags:
        - Professor
      summary: (Professor) Create a new assignment
      description: Allows a professor to create a new assignment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAssignment'
      responses:
        '201':
          description: Assignment created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'

  /assignments/{assignmentId}:
    get:
      tags:
        - Student
      summary: (Student) Assignment details
      description: Returns the details of a single specific assignment.
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: string
          description: The ID (ObjectId) of the assignment.
      responses:
        '200':
          description: Assignment details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'

  /assignments/{assignmentId}/submit:
    post:
      tags:
        - Student
      summary: (Student) Submit homework
      description: Allows a student to submit homework for a specific assignment.
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: string
          description: The ID (ObjectId) of the assignment being submitted to.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubmissionPayload'
      responses:
        '201':
          description: Submission successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'

  # --- Professor Area ---

  /submissions:
    get:
      tags:
        - Professor
      summary: (Professor) List all submissions
      description: Returns a list of all submissions received for all assignments.
      responses:
        '200':
          description: A list of submissions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'

  /submissions/{submissionId}:
    get:
      tags:
        - Professor
      summary: (Professor) Submission details
      description: Returns the details of a single specific submission.
      parameters:
        - name: submissionId
          in: path
          required: true
          schema:
            type: string
          description: The ID (ObjectId) of the submission.
      responses:
        '200':
          description: Submission details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'

# --- Components (Data Models) ---

components:
  schemas:
    # Model for an Assignment (Read)
    Assignment:
      type: object
      properties:
        _id:
          type: string
          description: ObjectId
          readOnly: true
        title:
          type: string
          example: "Final Flask Project"
        description:
          type: string
          example: "Develop a complete web app..."
        created_at:
          type: string
          format: date-time
          readOnly: true
        due_date:
          type: string
          format: date-time
          example: "2025-11-15T23:59:59Z"
      required:
        - _id
        - title
        - description
        - created_at
        - due_date

    # Model for creating a new Assignment (Write)
    NewAssignment:
      type: object
      properties:
        title:
          type: string
          example: "Final Flask Project"
        description:
          type: string
          example: "Develop a complete web app..."
        due_date:
          type: string
          format: date-time
          example: "2025-11-15T23:59:59Z"
      required:
        - title
        - description
        - due_date

    # Model for a File (nested in Submission)
    File:
      type: object
      properties:
        filename:
          type: string
          example: "project.zip"
        url:
          type: string
          format: uri
          example: "/uploads/project.zip"
      required:
        - filename
        - url

    # Model for a Submission (Read)
    Submission:
      type: object
      properties:
        _id:
          type: string
          description: ObjectId
          readOnly: true
        assignment_id:
          type: string
          description: Assignment ObjectId
          readOnly: true
        assignment_title:
          type: string
          description: Assignment title (denormalized)
          example: "Final Flask Project"
          readOnly: true
        student_name:
          type: string
          example: "John Doe"
        submitted_at:
          type: string
          format: date-time
          readOnly: true
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
          readOnly: true
      required:
        - _id
        - assignment_id
        - assignment_title
        - student_name
        - submitted_at
        - files

    # Model for a Submission Payload (Write)
    SubmissionPayload:
      type: object
      properties:
        student_name:
          type: string
          description: "Student's full name (combined)"
          example: "John Doe"
        files:
          type: array
          items:
            type: string
            format: binary
          description: One or more files to upload.
      required:
        - student_name
        - files

